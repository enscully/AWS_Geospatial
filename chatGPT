Write complete python code for a convolutional neural network for time series data that takes input as an hourly timestamp over 50 days to predict a binary for whether the ice cream machines were running or not for future dates. Each hourly timestamp is associated with a binary of whether the ice cream machines were running (1) or not (0). Use the Assume the data are already properly formatted and ready for input into the model. Also assume that GPU computations are not available



Sure! I can help you with that. Here's a complete Python code example for training a convolutional neural network (CNN) for time series data using hourly timestamps to predict whether the ice cream machines were running or not.

```python
import numpy as np
from tensorflow import keras
from sklearn.model_selection import train_test_split

# Assuming you have your data prepared and loaded into `X` and `y`
# `X` should be a numpy array of shape (number of samples, number of timesteps, number of features)
# `y` should be a numpy array of shape (number of samples,)

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the CNN model
model = keras.Sequential()
model.add(keras.layers.Conv1D(filters=32, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(keras.layers.MaxPooling1D(pool_size=2))
model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy:.4f}')

# Make predictions on new data
new_data = ...  # Prepare new data in the same format as `X`
predictions = model.predict(new_data)

# You can use the predictions for further analysis or decision-making
```

Note: In this example, I've used a simple CNN architecture with one convolutional layer, one max pooling layer, one flatten layer, and two dense layers. You can modify the architecture according to your needs.

Make sure you have the necessary dependencies installed, including TensorFlow and scikit-learn.
